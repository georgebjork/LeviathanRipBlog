@rendermode InteractiveServer

@inject ILogger<ViewBlog> Logger
@inject IBlogRepository BlogRepository
@inject ICampaignRepository CampaignRepository 
@inject IDocumentRepository DocumentRepository
@inject IDocumentStorage FileDocumentStorage

@page "/campaign/{CampaignId:long}/blog/{BlogId:long}"
@using LeviathanRipBlog.Data.Repositories
@using LeviathanRipBlog.Helpers
@using LeviathanRipBlog.Data.Models

<PageTitle>@(_blog?.title ?? "Loading...") </PageTitle>

<div>
    <article>
        @if (_blog is null)
        {
            <LoadingSpinner />
        }
        else
        {
            <div class="d-flex justify-content-end">
                <a class="btn btn-link" href="/campaign/@_blog.campaign_id"> Back to Campaign </a>
            </div>
            @if (!isImageLoading && imageSrc is not null)
            {
                <div class="w-100 text-center">
                    <figure class="mb-4">
                        <img class="img-fluid rounded" src="@imageSrc" alt="Loaded image" style="height: 500px; object-fit: contain"/>
                    </figure>
                </div>
            }
            else if (isImageLoading)
            {
                <div>
                    <LoadingSpinner />
                    <div class="text-muted fst-italic mb-2">Loading Image...</div>
                </div>
            }


            <!-- Post title-->
            <h1 class="fw-bolder mb-1">@_blog.title</h1>
            <!-- Post meta content-->
            <div class="text-muted fst-italic mb-2">Posted on: @_blog.publish_date.ConvertUtcToFormattedDate() by @_blog.created_by</div>

            <div class="text-muted fst-italic mb-2">Campaign:  <a href="/campaign/@_campaign!.id">@_campaign!.name</a></div>
            
            <div class="d-flex justify-content-between">
                <div class="text-muted fst-italic">Session on: @_blog.session_date.ConvertUtcToFormattedDate()</div>
                
                @if (userId == _blog.owner_id)
                {
                    <div>                    
                        <a class="btn btn-secondary" href="campaign/@_blog.campaign_id/blog/@_blog.id/edit">Edit  <i class="fa-solid fa-pen-to-square ps-2"></i> </a>
                    </div>
                }
            </div>

            <hr/>

            <section class="mb-5">
                <div class="lead fs-5" style="white-space: pre-wrap;">@_blog.blog_content</div>
            </section>
        }
    </article>
</div>

@code {
    [Parameter]
    public long BlogId { get; set; }
    
    [Parameter]
    public long CampaignId { get; set; }
    
    private blog? _blog;
    private campaign? _campaign;
    private string? blogDocument;

    private string? imageSrc;

    private bool isImageLoading = true; // Flag to indicate image loading status

    private string? userId;  

    protected override async Task OnInitializedAsync()
    {
        _blog = await BlogRepository.GetBlog(BlogId);
        _campaign = await CampaignRepository.GetCampaignById(_blog.campaign_id);

        userId = await UsernameRetriever.Identity ?? "unknown";
        
        if(_blog is null || _campaign is null) NavigationManager.NavigateTo("/");
        
        // Load image in a separate task without awaiting it here
        _ = LoadImageAsync();
    }

    private async Task LoadImageAsync()
    {
        try
        {
            blogDocument = await DocumentRepository.GetDocumentIdentifierByBlogId(_blog!.id);
            
            if (blogDocument is not null)
            {
                var (imageData, mimeType) = await FileDocumentStorage.RetrieveDocument(blogDocument);
                if (imageData.Length > 0)
                {
                    imageSrc = $"data:{mimeType};base64," + Convert.ToBase64String(imageData);
                }
            }
        }
        finally
        {
            isImageLoading = false;
            StateHasChanged(); // Trigger UI update
        }
    }
}