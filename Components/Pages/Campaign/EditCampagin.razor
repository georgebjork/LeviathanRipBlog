@rendermode InteractiveServer
@page "/campaign/{campaign_id:long}/edit"
@using LeviathanRipBlog.Components.Pages.Campaign.Models
@using LeviathanRipBlog.Data.Models
@using LeviathanRipBlog.Data.Repositories

@inject ILogger<CreateCampaign> _logger
@inject ICampaignRepository _campaign_repository


<EditForm method="post" Model="Model" OnValidSubmit="Submit"  FormName="campaign-form">
    <AntiforgeryToken />

    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="pb-5">
        <label for="name">Campaign Name:</label>
        <InputText id="name" @bind-Value="Model!.Name" class="form-control"></InputText>
    </div>
    
    <div class="pb-5">
        <label for="description">A brief description of the campaign:</label>
        <InputTextArea id="description" @bind-Value="Model!.Description" class="form-control"></InputTextArea>
    </div>
    
    <div class="d-grid gap-2">
        <button type="submit" class="btn btn-primary">Create</button>
        <button type="button" class="btn btn-danger" @onclick="Delete"> Delete </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public long campaign_id { get; set; }
    
    [SupplyParameterFromForm]
    public CampaignFormModel? Model { get; set; } = new();

    private campaign? campaign;
    private string? userId;
    
    protected override async Task OnInitializedAsync() {
        userId = await UsernameRetriever.Identity;
        campaign = await _campaign_repository.GetCampaignById(campaign_id);

        if (userId != campaign.owner_id)
        {
            NavigationManager.NavigateTo("/campaigns");
        }
        
        Model = Model!.ToFormModel(campaign);
    }

    private async Task Submit() {
        try
        {
            var updatedCampaign = Model!.ToUpdateCampaign(Model, campaign!);
            updatedCampaign.updated_by = await UsernameRetriever.Username;
            
            await _campaign_repository.Update(updatedCampaign);
            
            NavigationManager.NavigateTo("/campaigns");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Failed to update campaign");
        }
    }

    private async Task Delete() {
        try
        {
            campaign!.updated_by = await UsernameRetriever.Username;
            campaign!.updated_on = DateTime.UtcNow;
            campaign!.is_deleted = true;
        
            await _campaign_repository.Update(campaign!);
            NavigationManager.NavigateTo("/campaigns");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Failed to delete campaign");
        }
    }
    

}